insert:
INSERT OR IGNORE INTO match_model (id, state, date, tour_id, home, away)
VALUES (
:id, :state, :date, :tour_id,
(SELECT id FROM tour_team_model WHERE tour_team_model.tour_id == :home_tour_id AND tour_team_model.team_id == :home_id),
(SELECT id FROM tour_team_model WHERE tour_team_model.tour_id == :away_tour_id AND tour_team_model.team_id == :away_id)
)
ON CONFLICT(id) DO UPDATE SET state = :state, date = :date;

selectAll:
SELECT * FROM match_model;

selectAllMatchesByTour:
SELECT match_model.id, match_model.date, match_model.state, home_team.team_id AS home_id,
away_team.team_id AS away_id, match_set.end_time,
(CASE WHEN match_set.home_score > match_set.away_score THEN match_statistics_home_team.team_id ELSE match_statistics_away_team.team_id END) AS winner_team_id
FROM match_model
LEFT JOIN
match_statistics_model match_statistics ON match_model.id = match_statistics.id
LEFT JOIN
set_model match_set ON match_set.match_id = match_statistics.id
LEFT JOIN
tour_team_model match_statistics_home_team ON match_statistics.home = match_statistics_home_team.id
LEFT JOIN
tour_team_model match_statistics_away_team ON match_statistics.away = match_statistics_away_team.id
INNER JOIN
tour_team_model home_team ON match_model.home = home_team.id
INNER JOIN
tour_team_model away_team ON match_model.away = away_team.id
WHERE match_model.tour_id = :tour_id
AND CASE WHEN match_statistics.id IS NULL THEN TRUE ELSE match_set.number = (SELECT MAX(number) FROM set_model WHERE set_model.match_id = match_model.id) END;