import com.kamilh.models.Country;
import com.kamilh.models.Effect;
import com.kamilh.models.MatchId;
import com.kamilh.models.MatchReportId;
import com.kamilh.models.Phase;
import com.kamilh.models.Player.Specialization;
import com.kamilh.models.PlayerId;
import com.kamilh.models.PlayerPosition;
import com.kamilh.models.TeamId;
import com.kamilh.models.TourYear;
import com.kamilh.models.Url;
import com.kamilh.storage.MatchState;
import java.time.LocalDate;
import java.time.LocalDateTime;
import java.time.OffsetDateTime;
import java.util.UUID;
import kotlin.time.Duration;

CREATE TABLE IF NOT EXISTS league_model (
  id INTEGER PRIMARY KEY AUTOINCREMENT NOT NULL,
  country TEXT AS Country NOT NULL,
  division INTEGER AS Int NOT NULL,
  UNIQUE(country, division)
);

CREATE TABLE IF NOT EXISTS team_model (
  id INTEGER AS TeamId PRIMARY KEY NOT NULL,
  code TEXT DEFAULT NULL
);

CREATE TABLE IF NOT EXISTS tour_model (
  id INTEGER PRIMARY KEY AUTOINCREMENT NOT NULL,
  name TEXT NOT NULL,
  tour_year INTEGER AS TourYear NOT NULL,
  league_id INTEGER NOT NULL,
  start_date TEXT AS LocalDate NOT NULL,
  end_date TEXT AS LocalDate,
  winner_id INTEGER AS TeamId,
  updated_at TEXT AS LocalDateTime NOT NULL,
  UNIQUE(tour_year, league_id),
  FOREIGN KEY (league_id) REFERENCES league_model(id),
  FOREIGN KEY (winner_id) REFERENCES team_model(id)
);

CREATE TABLE IF NOT EXISTS tour_team_model (
    id INTEGER PRIMARY KEY AUTOINCREMENT NOT NULL,
    name TEXT NOT NULL,
    image_url TEXT AS Url NOT NULL,
    logo_url TEXT AS Url NOT NULL,
    team_id INTEGER AS TeamId NOT NULL,
    tour_id INTEGER NOT NULL,
    updated_at TEXT AS LocalDateTime NOT NULL,
    UNIQUE(team_id, tour_id),
    FOREIGN KEY (team_id) REFERENCES team_model(id),
    FOREIGN KEY (tour_id) REFERENCES tour_model(id)
);

CREATE TABLE IF NOT EXISTS player_model (
    id INTEGER AS PlayerId PRIMARY KEY NOT NULL,
    first_name TEXT DEFAULT NULL,
    last_name TEXT DEFAULT NULL,
    is_foreign INTEGER AS Boolean DEFAULT NULL,
    name TEXT NOT NULL,
    birth_date TEXT AS LocalDate NOT NULL,
    height INTEGER AS Int,
    weight INTEGER AS Int,
    range INTEGER AS Int,
    updated_at TEXT AS LocalDateTime NOT NULL
);

CREATE TABLE IF NOT EXISTS team_player_model (
    id INTEGER PRIMARY KEY AUTOINCREMENT NOT NULL,
    image_url TEXT AS Url,
    tour_team_id INTEGER NOT NULL,
    position INTEGER AS Specialization NOT NULL,
    player_id INTEGER AS PlayerId NOT NULL,
    number INTEGER AS Int NOT NULL,
    updated_at TEXT AS LocalDateTime NOT NULL,
    UNIQUE(player_id, tour_team_id),
    FOREIGN KEY (tour_team_id) REFERENCES tour_team_model(id),
    FOREIGN KEY (player_id) REFERENCES player_model(id)
);

CREATE TABLE IF NOT EXISTS match_statistics_model (
  id INTEGER AS MatchReportId PRIMARY KEY NOT NULL,
  home INTEGER NOT NULL,
  away INTEGER NOT NULL,
  mvp INTEGER NOT NULL,
  best_player INTEGER,
  tour_id INTEGER NOT NULL,
  phase TEXT AS Phase NOT NULL,
  updated_at TEXT AS LocalDateTime NOT NULL,
  FOREIGN KEY (home) REFERENCES tour_team_model(id),
  FOREIGN KEY (away) REFERENCES tour_team_model(id),
  FOREIGN KEY (mvp) REFERENCES team_player_model(id),
  FOREIGN KEY (best_player) REFERENCES team_player_model(id),
  FOREIGN KEY (tour_id) REFERENCES tour_model(id)
);

CREATE TABLE IF NOT EXISTS match_appearance_model (
    id INTEGER PRIMARY KEY AUTOINCREMENT NOT NULL,
    tour_team_id INTEGER NOT NULL,
    player_id INTEGER NOT NULL,
    match_statistics_id INTEGER AS MatchReportId NOT NULL,
    FOREIGN KEY (player_id) REFERENCES team_player_model(id),
    FOREIGN KEY (tour_team_id) REFERENCES tour_team_model(id),
    FOREIGN KEY (match_statistics_id) REFERENCES match_statistics_model(id)
);

CREATE TABLE IF NOT EXISTS set_model (
  id INTEGER PRIMARY KEY AUTOINCREMENT,
  number INTEGER AS Int NOT NULL,
  home_score INTEGER AS Int NOT NULL,
  away_score INTEGER AS Int NOT NULL,
  start_time TEXT AS OffsetDateTime NOT NULL,
  end_time TEXT AS OffsetDateTime NOT NULL,
  duration INTEGER AS Duration NOT NULL,
  match_statistics_id INTEGER AS MatchReportId NOT NULL,
  FOREIGN KEY (match_statistics_id) REFERENCES match_statistics_model(id)
);

CREATE TABLE IF NOT EXISTS point_lineup_model (
  id INTEGER PRIMARY KEY AUTOINCREMENT,
  p1 INTEGER NOT NULL,
  p2 INTEGER NOT NULL,
  p3 INTEGER NOT NULL,
  p4 INTEGER NOT NULL,
  p5 INTEGER NOT NULL,
  p6 INTEGER NOT NULL,
  FOREIGN KEY (p1) REFERENCES team_player_model(id),
  FOREIGN KEY (p2) REFERENCES team_player_model(id),
  FOREIGN KEY (p3) REFERENCES team_player_model(id),
  FOREIGN KEY (p4) REFERENCES team_player_model(id),
  FOREIGN KEY (p5) REFERENCES team_player_model(id),
  FOREIGN KEY (p6) REFERENCES team_player_model(id)
);

CREATE TABLE IF NOT EXISTS point_model (
  id INTEGER PRIMARY KEY AUTOINCREMENT,
  home_score INTEGER AS Int NOT NULL,
  away_score INTEGER AS Int NOT NULL,
  start_time TEXT AS OffsetDateTime NOT NULL,
  end_time TEXT AS OffsetDateTime NOT NULL,
  point INTEGER NOT NULL,
  set_id INTEGER NOT NULL,
  home_lineup INTEGER NOT NULL,
  away_lineup INTEGER NOT NULL,
  FOREIGN KEY (point) REFERENCES tour_team_model(id),
  FOREIGN KEY (set_id) REFERENCES set_model(id),
  FOREIGN KEY (home_lineup) REFERENCES point_lineup_model(id),
  FOREIGN KEY (away_lineup) REFERENCES point_lineup_model(id)
);

CREATE TABLE IF NOT EXISTS play_model (
  id INTEGER PRIMARY KEY AUTOINCREMENT,
  player_id INTEGER NOT NULL,
  play_index INTEGER AS Int NOT NULL,
  position INTEGER AS PlayerPosition,
  effect TEXT AS Effect NOT NULL,
  break_point INTEGER AS Boolean NOT NULL,
  point_id INTEGER NOT NULL,
  FOREIGN KEY (player_id) REFERENCES team_player_model(id),
  FOREIGN KEY (point_id) REFERENCES point_model(id)
);

CREATE TABLE IF NOT EXISTS play_serve_model (
  id INTEGER PRIMARY KEY AUTOINCREMENT,
  play_id INTEGER NOT NULL,
  receiver_id INTEGER,
  receiver_effect TEXT AS Effect,
  FOREIGN KEY (play_id) REFERENCES play_model(id),
  FOREIGN KEY (receiver_id) REFERENCES team_player_model(id)
);

CREATE TABLE IF NOT EXISTS play_receive_model (
  id INTEGER PRIMARY KEY AUTOINCREMENT,
  play_id INTEGER NOT NULL,
  server_id INTEGER NOT NULL,
  attack_effect TEXT AS Effect,
  set_effect TEXT AS Effect,
  FOREIGN KEY (play_id) REFERENCES play_model(id),
  FOREIGN KEY (server_id) REFERENCES team_player_model(id)
);

CREATE TABLE IF NOT EXISTS play_freeball_model (
  id INTEGER PRIMARY KEY AUTOINCREMENT,
  play_id INTEGER NOT NULL,
  after_side_out INTEGER AS Boolean NOT NULL,
  FOREIGN KEY (play_id) REFERENCES play_model(id)
);

CREATE TABLE IF NOT EXISTS play_attack_model (
  id INTEGER PRIMARY KEY AUTOINCREMENT,
  play_id INTEGER NOT NULL,
  side_out INTEGER AS Boolean NOT NULL,
  block_attempt INTEGER AS Boolean NOT NULL,
  dig_attempt INTEGER AS Boolean NOT NULL,
  receive_effect TEXT AS Effect,
  receive_id INTEGER,
  set_effect TEXT AS Effect,
  setter_id INTEGER,
  FOREIGN KEY (play_id) REFERENCES play_model(id),
  FOREIGN KEY (receive_id) REFERENCES team_player_model(id),
  FOREIGN KEY (setter_id) REFERENCES team_player_model(id)
);

CREATE TABLE IF NOT EXISTS play_block_model (
  id INTEGER PRIMARY KEY AUTOINCREMENT,
  play_id INTEGER NOT NULL,
  after_side_out INTEGER AS Boolean NOT NULL,
  attacker_id INTEGER NOT NULL,
  setter_id INTEGER,
  FOREIGN KEY (play_id) REFERENCES play_model(id),
  FOREIGN KEY (attacker_id) REFERENCES team_player_model(id),
  FOREIGN KEY (setter_id) REFERENCES team_player_model(id)
);

CREATE TABLE IF NOT EXISTS play_dig_model (
  id INTEGER PRIMARY KEY AUTOINCREMENT,
  play_id INTEGER NOT NULL,
  after_side_out INTEGER AS Boolean NOT NULL,
  attacker_id INTEGER,
  rebounder_id INTEGER,
  FOREIGN KEY (play_id) REFERENCES play_model(id),
  FOREIGN KEY (attacker_id) REFERENCES team_player_model(id),
  FOREIGN KEY (rebounder_id) REFERENCES team_player_model(id)
);

CREATE TABLE IF NOT EXISTS play_set_model (
  id INTEGER PRIMARY KEY AUTOINCREMENT,
  play_id INTEGER NOT NULL,
  side_out INTEGER AS Boolean NOT NULL,
  attacker_id INTEGER,
  attacker_position INTEGER AS PlayerPosition,
  FOREIGN KEY (play_id) REFERENCES play_model(id),
  FOREIGN KEY (attacker_id) REFERENCES team_player_model(id)
);

CREATE TABLE IF NOT EXISTS match_model (
  id INTEGER AS MatchId PRIMARY KEY,
  state TEXT AS MatchState NOT NULL,
  date TEXT AS LocalDateTime,
  match_statistics_id INTEGER AS MatchReportId,
  tour_id INTEGER NOT NULL,
  FOREIGN KEY (match_statistics_id) REFERENCES match_statistics_model(id),
  FOREIGN KEY (tour_id) REFERENCES tour_model(id)
);

CREATE TABLE IF NOT EXISTS user_model (
  id INTEGER PRIMARY KEY AUTOINCREMENT,
  subscription_key TEXT AS UUID NOT NULL UNIQUE,
  device_id TEXT AS UUID NOT NULL UNIQUE,
  created_date TEXT AS OffsetDateTime NOT NULL
);